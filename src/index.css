
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;

    --primary: 16 93% 59%; /* #f85f36 - Orange-Red from logo */
    --primary-foreground: 0 0% 100%;

    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;

    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;

    --accent: 33 94% 54%; /* #f8941c - Orange from logo */
    --accent-foreground: 0 0% 100%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 16 93% 59%; /* #f85f36 - Orange-Red from logo */

    --radius: 0.5rem;

    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;

    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;

    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;

    --primary: 16 93% 59%; /* #f85f36 - Orange-Red from logo */
    --primary-foreground: 0 0% 100%;

    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;

    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;

    --accent: 33 94% 54%; /* #f8941c - Orange from logo */
    --accent-foreground: 0 0% 100%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;

    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 16 93% 59%; /* #f85f36 - Orange-Red from logo */

    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground;
    font-family: 'Inter', 'Roboto', sans-serif;
  }
}

.map-container {
  width: 100%;
  height: 100%;
  min-height: 300px;
}

.route-animation {
  stroke-dasharray: 10;
  animation: dash 1.5s linear infinite;
}

@keyframes dash {
  to {
    stroke-dashoffset: 20;
  }
}

/* Branded button styles */
.btn-primary {
  @apply bg-brand-primary text-white hover:bg-brand-primary/90 transition-colors;
}

.btn-accent {
  @apply bg-brand-orange text-white hover:bg-brand-orange/90 transition-colors;
}

/* Logo text styling */
.logo-text {
  @apply font-bold;
}

.logo-text-go {
  @apply text-brand-orange;
}

.logo-text-rest {
  @apply text-black dark:text-white;
}

/* Dark mode styles for navbar */
.dark .hover\:bg-gray-100 {
  @apply hover:bg-gray-800;
}

/* Fix for the TypeScript errors in ChatBox.tsx */
<lov-write file_path="src/hooks/use-chat-messages.ts">
import { useState, useEffect } from "react";
import { supabase } from "@/integrations/supabase/client";
import { useAuth } from "@/contexts/AuthContext";

export interface ChatMessage {
  id: string;
  content: string;
  sender_id: string;
  recipient_id: string;
  order_id: string;
  sent_at: string;
  read: boolean;
  sender_name?: string;
  message_id?: string; // Added for compatibility with ChatBox
  isCurrentUser?: boolean; // Added for compatibility with ChatBox
}

export function useChatMessages(orderId: string) {
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<Error | null>(null);
  const { user } = useAuth();

  useEffect(() => {
    if (!user || !orderId) return;

    const fetchMessages = async () => {
      try {
        setLoading(true);
        
        // Fetch messages for this order
        const { data: messagesData, error: messagesError } = await supabase
          .from('messages')
          .select(`
            *,
            users!sender_id(name)
          `)
          .eq('order_id', orderId)
          .order('sent_at', { ascending: true });
        
        if (messagesError) throw messagesError;
        
        // Mark messages as read if they were sent to current user
        const unreadMessages = messagesData?.filter(
          msg => msg.recipient_id === user.id && !msg.read
        ) || [];
        
        if (unreadMessages.length > 0) {
          const { error: updateError } = await supabase
            .from('messages')
            .update({ read: true })
            .in('id', unreadMessages.map(msg => msg.id));
          
          if (updateError) console.error("Error marking messages as read:", updateError);
        }
        
        // Format messages with sender name and additional properties for ChatBox
        const formattedMessages = messagesData?.map(msg => {
          // Safely access the sender name from the joined users table
          const senderObj = msg.users || {};
          const sender_name = senderObj && typeof senderObj === 'object' 
            ? (senderObj as any).name || 'Unknown User'
            : 'Unknown User';
          
          return {
            ...msg,
            sender_name,
            message_id: msg.id, // Add message_id for ChatBox
            isCurrentUser: msg.sender_id === user.id // Add isCurrentUser flag for ChatBox
          };
        }) || [];
        
        setMessages(formattedMessages);
      } catch (err) {
        setError(err as Error);
        console.error("Error fetching messages:", err);
      } finally {
        setLoading(false);
      }
    };

    fetchMessages();

    // Set up real-time subscription for new messages
    const channel = supabase
      .channel(`order-messages-${orderId}`)
      .on('postgres_changes', {
        event: 'INSERT',
        schema: 'public',
        table: 'messages',
        filter: `order_id=eq.${orderId}`,
      }, 
      () => {
        fetchMessages();
      })
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
  }, [user, orderId]);

  // Function to send a new message
  const sendMessage = async (content: string, recipientId: string) => {
    if (!user || !content.trim() || !recipientId || !orderId) {
      return { error: new Error("Missing required information to send message") };
    }

    try {
      const newMessage = {
        order_id: orderId,
        sender_id: user.id,
        recipient_id: recipientId,
        content: content.trim(),
        read: false,
      };

      const { data, error } = await supabase
        .from('messages')
        .insert(newMessage)
        .select('*')
        .single();

      if (error) throw error;

      return { data, error: null };
    } catch (err) {
      console.error("Error sending message:", err);
      return { data: null, error: err as Error };
    }
  };

  return {
    messages,
    loading,
    error,
    sendMessage,
  };
}
